version: '3'
services:

  # ðŸ§  Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.1
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  # ðŸŸ¦ Kafka Broker 1
  kafka-broker-1:
    image: confluentinc/cp-kafka:7.2.1
    container_name: kafka-broker-1
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:29092,EXTERNAL://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-broker-1:29092,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
    volumes:
      - kafka-broker-1-data:/var/lib/kafka/data
    depends_on:
      - zookeeper
    command: >
      bash -c "
        /etc/confluent/docker/run &
        sleep 20 &&
        kafka-topics --create --if-not-exists --bootstrap-server kafka-broker-1:29092 --replication-factor 3 --partitions 3 --topic events-topic --config cleanup.policy=compact --config segment.ms=1000 --config min.cleanable.dirty.ratio=0.01 &&
        wait
      "

  # ðŸŸ© Kafka Broker 2
  kafka-broker-2:
    image: confluentinc/cp-kafka:7.2.1
    container_name: kafka-broker-2
    ports:
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:29093,EXTERNAL://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-broker-2:29093,EXTERNAL://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
    volumes:
      - kafka-broker-2-data:/var/lib/kafka/data
    depends_on:
      - zookeeper

  # ðŸŸ¥ Kafka Broker 3
  kafka-broker-3:
    image: confluentinc/cp-kafka:7.2.1
    container_name: kafka-broker-3
    ports:
      - "9094:9094"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:29094,EXTERNAL://0.0.0.0:9094
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-broker-3:29094,EXTERNAL://localhost:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
    volumes:
      - kafka-broker-3-data:/var/lib/kafka/data
    depends_on:
      - zookeeper

  # ðŸ—‚ PostgreSQL
  postgres:
    image: postgres:14
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: events
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    volumes:
      - pgdata:/var/lib/postgresql/data

  # ðŸš€ Producteur Spring Boot
  producer:
    build:
      context: ./producer
    container_name: producer
    ports:
      - "8089:8089"
    depends_on:
      - kafka-broker-1
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: localhost:9092
    restart: on-failure

    # ðŸš€ Producteur Spring Boot
  consumer:
    build:
      context: ./consumer
    container_name: consumer
    ports:
      - "8087:8087"
    depends_on:
      - kafka-broker-1
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: localhost:9092
    restart: on-failure

  # âœ… Redpanda Console
  redpanda-console:
    image: docker.redpanda.com/redpandadata/console:latest
    container_name: redpanda-console
    ports:
      - "8088:8080"
    environment:
      - KAFKA_BROKERS=kafka-broker-1:29092,kafka-broker-2:29093,kafka-broker-3:29094
    depends_on:
      - kafka-broker-1

volumes:
  kafka-broker-1-data:
  kafka-broker-2-data:
  kafka-broker-3-data:
  pgdata:
